generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cargos {
  id           Int            @id @default(autoincrement())
  nome         String         @unique(map: "nome") @db.VarChar(255)
  descricao    String?        @db.Text
  salarioBase  Decimal?       @default(0.00) @db.Decimal(10, 2)
  status       cargos_status? @default(ativo)
  funcionarios funcionarios[]
}

model categorias {
  id          Int        @id @default(autoincrement())
  nome        String     @unique(map: "nome") @db.VarChar(255)
  descricao   String?    @db.Text
  dataCriacao DateTime?  @default(now()) @db.Timestamp(0)
  produtos    produtos[]
}

model comandas {
  id             Int              @id @default(autoincrement())
  numero_comanda String           @unique(map: "numero_comanda") @db.VarChar(20)
  data_abertura  DateTime?        @default(now()) @db.Timestamp(0)
  status         comandas_status? @default(aberta)
  valor_total    Decimal?         @default(0.00) @db.Decimal(10, 2)
  mesa_id        Int?
  mesas          mesas?           @relation(fields: [mesa_id], references: [id], map: "comandas_ibfk_1")
  pedidos        pedidos[]

  @@index([mesa_id], map: "mesa_id")
}

model fornecedores {
  id                    Int                  @id @default(autoincrement())
  razaoSocial           String               @db.VarChar(255)
  cnpj                  String               @unique(map: "cnpj") @db.Char(14)
  representante         String               @db.VarChar(255)
  telefoneRepresentante String               @db.Char(11)
  telefone              String               @db.Char(11)
  email                 String               @unique(map: "email") @db.VarChar(255)
  cep                   String               @db.Char(9)
  estado                String               @db.Char(2)
  cidade                String               @db.VarChar(255)
  bairro                String               @db.VarChar(255)
  rua                   String               @db.VarChar(255)
  numero                Int                  @db.SmallInt
  status                fornecedores_status? @default(ativo)
  revenda               revenda[]
}

model funcionarios {
  id             String               @id @db.Char(11)
  nome           String               @db.VarChar(255)
  genero         funcionarios_genero
  email          String               @unique(map: "email") @db.VarChar(255)
  telefone       String               @db.VarChar(15)
  cep            String               @db.Char(9)
  estado         String               @db.Char(2)
  cidade         String               @db.VarChar(255)
  bairro         String               @db.VarChar(255)
  rua            String               @db.VarChar(255)
  numero         Int                  @db.SmallInt
  cpf            String               @unique(map: "cpf") @db.Char(11)
  pis            String               @unique(map: "pis") @db.Char(11)
  dataNascimento DateTime             @db.Date
  idCargo        Int
  setor          String               @db.VarChar(255)
  dataAdmissao   DateTime             @db.Date
  dataDemissao   DateTime?            @db.Date
  salario        Decimal?             @default(0.00) @db.Decimal(10, 2)
  senha          String?              @db.VarChar(255)
  status         funcionarios_status? @default(ativo)
  cargos         cargos               @relation(fields: [idCargo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "funcionarios_ibfk_1")
  pedidos        pedidos[]

  @@index([idCargo], map: "idCargo")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model mesas {
  id            Int        @id @default(autoincrement())
  numero        Int        @unique(map: "numero") @db.SmallInt
  capacidade    Int        @db.SmallInt
  status        Boolean?   @default(false)
  descricao     String?    @db.Text
  atualizado_em DateTime?  @default(now()) @db.Timestamp(0)
  comandas      comandas[]
}

model pedidos {
  id               Int                @id @default(autoincrement())
  numero_pedido    String             @unique(map: "numero_pedido") @db.VarChar(50)
  comanda_id       Int?
  data_hora        DateTime?          @default(now()) @db.Timestamp(0)
  status           pedidos_status?    @default(pendente)
  total            Decimal?           @default(0.00) @db.Decimal(10, 2)
  funcionario_id   String?            @db.Char(11)
  observacoes      String?            @db.Text
  funcionarios     funcionarios?      @relation(fields: [funcionario_id], references: [cpf], map: "pedidos_ibfk_1")
  comandas         comandas?          @relation(fields: [comanda_id], references: [id], map: "pedidos_ibfk_2")
  pedidos_produtos pedidos_produtos[]

  @@index([comanda_id], map: "comanda_id")
  @@index([funcionario_id], map: "funcionario_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pedidos_produtos {
  id         Int      @id @default(autoincrement())
  pedido_id  Int
  produto_id Int
  quantidade Int
  subtotal   Decimal  @db.Decimal(10, 2)
  cozinha    Boolean? @default(false)
  pedidos    pedidos  @relation(fields: [pedido_id], references: [id], onDelete: Cascade, map: "pedidos_produtos_ibfk_1")
  produtos   produtos @relation(fields: [produto_id], references: [id], map: "pedidos_produtos_ibfk_2")

  @@index([pedido_id], map: "pedido_id")
  @@index([produto_id], map: "produto_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model produtos {
  id               Int                @id @default(autoincrement())
  categoria_id     Int
  descricao        String?            @db.Text
  preco            Decimal            @db.Decimal(10, 2)
  data_cadastro    DateTime?          @default(now()) @db.Timestamp(0)
  status           produtos_status?   @default(ativo)
  imagem_url       String?            @db.VarChar(500)
  pedidos_produtos pedidos_produtos[]
  categorias       categorias         @relation(fields: [categoria_id], references: [id], map: "produtos_ibfk_1")
  revenda          revenda?
  salgados         salgados?

  @@index([categoria_id], map: "categoria_id")
}

model revenda {
  id               Int          @id
  nome             String       @db.VarChar(255)
  codigo_de_barras String       @unique(map: "codigo_de_barras") @db.VarChar(255)
  fornecedor_id    Int
  produtos         produtos     @relation(fields: [id], references: [id], onDelete: Cascade, map: "revenda_ibfk_1")
  fornecedores     fornecedores @relation(fields: [fornecedor_id], references: [id], onDelete: Cascade, map: "revenda_ibfk_2")

  @@index([fornecedor_id], map: "fornecedor_id")
}

model salgados {
  id            Int                    @id
  nome          String                 @db.VarChar(255)
  recheio       String                 @db.VarChar(255)
  classificacao salgados_classificacao
  status        salgados_status?       @default(ativo)
  produtos      produtos               @relation(fields: [id], references: [id], onDelete: Cascade, map: "salgados_ibfk_1")
}

enum funcionarios_genero {
  masculino
  feminino
}

enum comandas_status {
  aberta
  fechada
  cancelada
}

enum salgados_classificacao {
  frito
  assado
}

enum pedidos_status {
  pendente
  em_preparo
  pronto
  finalizado
  cancelado
}

enum salgados_status {
  ativo
  inativo
}

enum cargos_status {
  ativo
  inativo
}

enum produtos_status {
  ativo
  inativo
}

enum fornecedores_status {
  ativo
  inativo
}

enum funcionarios_status {
  ativo
  inativo
}
